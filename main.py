import os
import shutil
import json
import sys
import zipfile
import logging
from tqdm import tqdm  # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
import tkinter as tk
from tkinter import messagebox, filedialog, ttk, scrolledtext
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='module_errors.log', level=logging.ERROR,
                    format='%(asctime)s:%(levelname)s:%(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = {}
extensions_to_process = []
scan_folder = ''
clone_folder = ''
version = '1.0.1'  # –û–±–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
author = 'Your Name'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_config():
    global config, extensions_to_process, scan_folder, clone_folder
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ config.json, –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not os.path.exists('config.json'):
            default_config = {
                "extensions": [".php", ".js", ".py", ".json"],
                "scan_folder": "scan",
                "clone_folder": "clone"
            }
            with open('config.json', 'w', encoding='utf-8') as config_file:
                json.dump(default_config, config_file, ensure_ascii=False, indent=4)
            config = default_config
        else:
            with open('config.json', 'r', encoding='utf-8') as config_file:
                config = json.load(config_file)

        extensions_to_process = config.get("extensions", [".php", ".js", ".py", ".json"])
        scan_folder = config.get("scan_folder", "scan")
        clone_folder = config.get("clone_folder", "clone")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ scan –∏ clone, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not os.path.exists(scan_folder):
            os.makedirs(scan_folder)
        if not os.path.exists(clone_folder):
            os.makedirs(clone_folder)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_config():
    try:
        config['extensions'] = extensions_to_process
        config['scan_folder'] = scan_folder
        config['clone_folder'] = clone_folder
        with open('config.json', 'w', encoding='utf-8') as config_file:
            json.dump(config, config_file, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
def clear_folder(folder_path):
    if os.path.exists(folder_path):
        shutil.rmtree(folder_path)
    os.makedirs(folder_path)

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
def process_folder(folder_path, output_lines, extensions_to_process, relative_path=""):
    try:
        items = os.listdir(folder_path)
        items.sort()
        for item in items:
            item_path = os.path.join(folder_path, item)
            display_path = os.path.join(relative_path, item)
            if os.path.isdir(item_path):
                output_lines.append(f"üìÅ {display_path}/")
                process_folder(item_path, output_lines, extensions_to_process, display_path)
            else:
                if any(item.endswith(ext) for ext in extensions_to_process):
                    output_lines.append(f"üìÑ {display_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ '{folder_path}': {e}")

def write_file_contents(folder_path, output_lines, extensions_to_process, relative_path=""):
    try:
        items = os.listdir(folder_path)
        items.sort()
        for item in items:
            item_path = os.path.join(folder_path, item)
            display_path = os.path.join(relative_path, item)
            if os.path.isdir(item_path):
                write_file_contents(item_path, output_lines, extensions_to_process, display_path)
            else:
                if any(item.endswith(ext) for ext in extensions_to_process):
                    output_lines.append(f"\n---\n**–§–∞–π–ª:** `{display_path}`\n```")
                    try:
                        with open(item_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            output_lines.append(content)
                    except Exception as e:
                        output_lines.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ '{item_path}': {e}")
                    output_lines.append("```\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ '{folder_path}': {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ...

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –≤ GUI
def update_log(text_widget, message):
    text_widget.config(state='normal')
    text_widget.insert(tk.END, message + '\n')
    text_widget.see(tk.END)
    text_widget.config(state='disabled')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
def main_process(log_widget, progress_bar):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        load_config()

        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
        clear_folder(clone_folder)
        update_log(log_widget, f"–ü–∞–ø–∫–∞ '{clone_folder}' –æ—á–∏—â–µ–Ω–∞.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if not os.path.exists(scan_folder):
            logging.error(f"–ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è '{scan_folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è '{scan_folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ scan
        folders = [f for f in os.listdir(scan_folder) if os.path.isdir(os.path.join(scan_folder, f))]

        if not folders:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–í –ø–∞–ø–∫–µ '{scan_folder}' –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        for folder in folders:
            folder_path = os.path.join(scan_folder, folder)
            output_file_name = f"{folder}.txt"
            output_file_path = os.path.join(clone_folder, output_file_name)

            update_log(log_widget, f"\n–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏: {folder}")

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            total_items = count_items(folder_path) * 3  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 3, —Ç.–∫. —Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ö–æ–¥–∞
            progress_bar['maximum'] = total_items
            progress_bar['value'] = 0

            output_lines = []

            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏
            output_lines.append(f"# –ò–µ—Ä–∞—Ä—Ö–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –¥–ª—è '{folder}':\n")
            process_folder(folder_path, output_lines, extensions_to_process)

            # –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
            output_lines.append("\n# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:\n")
            write_file_contents(folder_path, output_lines, extensions_to_process)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            with open(output_file_path, 'w', encoding='utf-8') as output_file:
                output_file.write('\n'.join(output_lines))

            update_log(log_widget, f"–ò–µ—Ä–∞—Ä—Ö–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {output_file_path}")

            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
            clone_destination = os.path.join(clone_folder, folder)
            clone_and_rename(folder_path, clone_destination, extensions_to_process)
            update_log(log_widget, f"–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{clone_destination}'")

            # –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞
            zip_name = f"{folder}.zip"
            create_zip(clone_destination, zip_name)
            update_log(log_widget, f"ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {os.path.join(clone_folder, zip_name)}")

        update_log(log_widget, "\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ...

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ GUI
def run_gui():
    load_config()
    root = tk.Tk()
    root.title("–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")
    root.geometry("700x600")

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    style = ttk.Style()
    style.theme_use('clam')

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
    main_frame = ttk.Frame(root, padding="10")
    main_frame.pack(fill=tk.BOTH, expand=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
    title_label = ttk.Label(main_frame, text="–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤", font=("Helvetica", 16, "bold"))
    title_label.pack(pady=5)

    info_text = f"""–í–µ—Ä—Å–∏—è: {version}
–ê–≤—Ç–æ—Ä: {author}

–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É '{scan_folder}' –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.
- –°–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–æ–≤.
- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –Ω–∞ '.txt'.
- –°–æ–∑–¥–∞–≤–∞—Ç—å ZIP-–∞—Ä—Ö–∏–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–º–µ—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –ø–∞–ø–∫—É '{scan_folder}' –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É'."""
    info_label = ttk.Label(main_frame, text=info_text, justify=tk.LEFT)
    info_label.pack(pady=5)

    # –ö–Ω–æ–ø–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    btn_frame = ttk.Frame(main_frame)
    btn_frame.pack(fill=tk.X, pady=5)

    btn_start = ttk.Button(btn_frame, text="–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
    btn_start.pack(side=tk.LEFT, padx=5)

    btn_scan = ttk.Button(btn_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    btn_scan.pack(side=tk.LEFT, padx=5)

    btn_clone = ttk.Button(btn_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    btn_clone.pack(side=tk.LEFT, padx=5)

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    ext_label = ttk.Label(main_frame, text="–†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    ext_label.pack(anchor=tk.W, padx=5)
    ext_entry = ttk.Entry(main_frame)
    ext_entry.pack(fill=tk.X, padx=5, pady=5)
    ext_entry.insert(0, ', '.join(extensions_to_process))

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = ttk.Progressbar(main_frame, orient='horizontal', mode='determinate')
    progress_bar.pack(fill=tk.X, padx=5, pady=5)

    # –ñ—É—Ä–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
    log_label = ttk.Label(main_frame, text="–ñ—É—Ä–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    log_label.pack(anchor=tk.W, padx=5)
    log_text = scrolledtext.ScrolledText(main_frame, height=15, state='disabled')
    log_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

    # –§—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
    def start_processing():
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        global extensions_to_process
        extensions = ext_entry.get()
        extensions_to_process = [ext.strip() for ext in extensions.split(',')]
        save_config()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        processing_thread = threading.Thread(target=main_process, args=(log_text, progress_bar))
        processing_thread.start()

    def open_scan_folder():
        global scan_folder
        folder = filedialog.askdirectory()
        if folder:
            scan_folder = folder
            save_config()
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {folder}")

    def open_clone_folder():
        global clone_folder
        folder = filedialog.askdirectory()
        if folder:
            clone_folder = folder
            save_config()
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–ü–∞–ø–∫–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {folder}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
    def on_closing():
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            root.destroy()

    root.protocol("WM_DELETE_WINDOW", on_closing)

    # –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º
    btn_start.config(command=start_processing)
    btn_scan.config(command=open_scan_folder)
    btn_clone.config(command=open_clone_folder)

    root.mainloop()

if __name__ == "__main__":
    run_gui()
